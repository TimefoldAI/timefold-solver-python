# Runs the SonarCloud analysis of the Timefold Solver Python main branch after a PR is merged.
name: SonarCloud Analysis

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'LICENSE*'
      - '.gitignore'
      - '**.md'
      - '**.adoc'
      - '*.txt'
      - '.ci/**'

defaults:
  run:
    shell: bash

jobs:
  sonarcloud-analysis:
    runs-on: ubuntu-latest

    steps:
      # Need to check for stale repo, since Github is not aware of the build chain and therefore doesn't automate it.
      - name: Checkout timefold-solver to access the scripts
        uses: actions/checkout@v4
        with:
          path: './timefold-solver'
          repository: 'TimefoldAI/timefold-solver'
      - name: Find the proper timefold-solver repo and branch
        env:
          CHAIN_USER: ${{ github.event.pull_request.head.repo.owner.login }}
          CHAIN_BRANCH: ${{ github.head_ref }}
          CHAIN_REPO: "timefold-solver"
          CHAIN_DEFAULT_BRANCH: ${{ endsWith(github.head_ref, '.x') && github.head_ref || 'main' }}
        shell: bash
        run: |
          ./timefold-solver/.github/scripts/check_chain_repo.sh
          rm -rf ./timefold-solver
      - name: Checkout the proper timefold-solver branch
        uses: actions/checkout@v4
        with:
          repository: ${{ env.TARGET_CHAIN_USER }}/${{ env.TARGET_CHAIN_REPO }}
          ref: ${{ env.TARGET_CHAIN_BRANCH }}
          path: './timefold-solver'
          fetch-depth: 0 # Otherwise merge in the next step will fail on account of not having history.
      - name: Prevent stale fork of timefold-solver
        env:
          BLESSED_REPO: "timefold-solver"
          BLESSED_BRANCH: ${{ endsWith(github.head_ref, '.x') && github.head_ref || 'main' }}
        shell: bash
        working-directory: ./timefold-solver
        run: .github/scripts/prevent_stale_fork.sh
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          ref: ${{ github.event.pull_request.head.sha }} # The GHA event will pull the main branch by default, and we must specify the PR reference version
          path: './timefold-solver-python'

      # Build and test
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          # Need to install all Python versions in the same run for tox
      - name: Python 3.9, Python 3.10, Python 3.11 Setup
        uses: actions/setup-python@v4
        with:
          python-version: |
            3.9
            3.10
            3.11
          cache: 'pip'
          cache-dependency-path: |
            **/setup.py
      - name: Install tox
        run:
          python -m pip install --upgrade pip
          pip install tox coverage pytest pytest-cov
      - name: Quickly build timefold-solver
        working-directory: ./timefold-solver
        run: mvn -B -Dquickly clean install
      - name: Build with Maven to measure code coverage
        working-directory: ./timefold-solver-python
        run: mvn -B --fail-at-end clean install -Prun-code-coverage
      - name: Get JaCoCo Agent
        working-directory: ./timefold-solver-python
        run: mvn org.apache.maven.plugins:maven-dependency-plugin:2.8:get -Dartifact=org.jacoco:org.jacoco.agent:0.8.11:jar:runtime -Ddest=target/jacocoagent.jar
      - name: Run tox to measure timefold solver python code coverage from Python tests
        continue-on-error: true # Sometimes the JVM segfaults on SUCCESSFUL tests with Java 17 (and always with Java 11)
        working-directory: ./timefold-solver-python
        run: python -m tox -- --cov=timefold --cov-report=xml:target/coverage.xml --cov-config=tox.ini --cov-branch --cov-append --jacoco-agent=./target/jacocoagent.jar
      - name: Run tox to measure jpyinterpreter code coverage from Python tests
        continue-on-error: true # Sometimes the JVM segfaults on SUCCESSFUL tests with Java 17 (and always with Java 11)
        working-directory: ./timefold-solver-python/jpyinterpreter
        run: python -m tox -- --cov=jpyinterpreter --cov-report=xml:target/coverage.xml --cov-config=tox.ini --cov-branch --cov-append --jacoco-agent=../target/jacocoagent.jar --jacoco-output=../target/jacoco.exec
      # Because we are using JPype, and JPype add it own import hook, we need to use --import-mode=importlib in pytest
      # This seems to create an issue in test coverage, where it reports coverage inside the tox virtual environment,
      # instead of coverage inside sources. For instance, for a package, it will report:
      # package name=".tox.py39.lib.python3.9.site-packages.jpyinterpreter"
      # and for a file it will report:
      # class name="jvm_setup.py" filename=".tox/py39/lib/python3.9/site-packages/jpyinterpreter/jvm_setup.py"
      # We need to convert the package and file names into their true names; i.e. for the example above:
      # package name="jpyinterpreter"
      # class name="jvm_setup.py" filename="jpyinterpreter/src/main/python/jvm_setup.py"
      # fix-coverage-paths.py is a Python script that does the above transformation for us and merge the two
      # separate coverage files into one.
      - name: Fix Python test coverage paths
        working-directory: ./timefold-solver-python
        run: python fix-coverage-paths.py
      - name: Run SonarCloud analysis
        working-directory: ./timefold-solver-python
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONARCLOUD_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
        run: mvn -B --fail-at-end validate -Psonarcloud-analysis -Dsonar.projectKey=timefold_solver_python -Dsonar.login=${{ env.SONARCLOUD_TOKEN }}